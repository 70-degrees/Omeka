<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 * Created: Monday 19th of March 2007 05:21:31 PM
 */
class ItemsFulltext extends Kea_Record
{
    public function setTableDefinition()
    {
		$this->option('type', 'MyISAM');
        $this->hasColumn('id', 'integer', 4, array('notnull' => true, 
                                                   'primary' => true, 
                                                   'autoincrement' => true, 
                                                   'unsigned' => true));
		$this->hasColumn("item_id", "integer", null, array('unique' => true));
        $this->hasColumn('text', 'clob', null, array('notnull' => true));
		$this->index('myindex', array(
                          'fields' => 'text',
                          'type' => 'fulltext',
                          ));
    }
    public function setUp()
    {
		$this->hasOne('Item', 'ItemsFulltext.item_id');
		
    }

	public function aggregate()
	{
		$class = 'Item';
		$record = $this->Item;
		
		//Get a list of the indexed elements from the ini file
		require_once 'Zend/Config/Ini.php';
		$ini = new Zend_Config_Ini(LIB_DIR.'/Kea/fields.ini');
	
		//Cook up an aggregate text value of all the indexable values for this Item
		$aggregate = '';
	
		$relations = explode('|', $ini->fields->$class->relation);
		array_unshift($relations, $class);

		foreach($relations as $relation) {
			$match = $ini->fields->$relation->match;
			$fields = explode('|', $match);
			foreach ($fields as $field) {
				if($relation == $class) {
					$aggregate .= ' '.$record->$field;
				} elseif($record->$relation instanceof Doctrine_Collection) {
					foreach ($record->$relation as $rel) {
						$aggregate .= ' '.$rel->$field;
					}
				} elseif($record->hasRelation($relation)) {
					$aggregate .= ' '.$record->$relation->$field;
				}
			}
			
			
			
/*			foreach ($fields as $field) {
				$plural = $relation.'s';
				if($relation == $class) {
					
				} elseif($record->hasRelation($plural)) {
					//In this case it must be a plural relation
					
					foreach ($record->$plural as $key => $relatedRecord) {
						$aggregate .= ' '.$relatedRecord->$field;
					}
				}elseif($record->hasRelation($relation)) {
					$aggregate .= ' '.$record->$relation->$field;
				}
			}*/
		}
		
		$this->text = $aggregate;
	}
}
