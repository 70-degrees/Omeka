<?php
/**
 * @copyright Roy Rosenzweig Center for History and New Media, 2007-2010
 * @license http://www.gnu.org/licenses/gpl-3.0.txt
 * @package Omeka
 */

/**
 * Customized subclass of Zend Framework's Zend_Navigation class.
 *
 *
 * @package Omeka
 * @copyright Roy Rosenzweig Center for History and New Media, 2007-2010
 */
class Omeka_Navigation extends Zend_Navigation
{       
    /**
     * Creates a new navigation container
     *
     * @param array|Zend_Config $pages    [optional] pages to add
     * @throws Zend_Navigation_Exception  if $pages is invalid
     */
    public function __construct($pages = null)
    {
        parent::__construct($pages);
    }
    
    public function saveAsOption($optionName) 
    {
        set_option($optionName, json_encode($this->toArray()));
    }
    
    public function loadAsOption($optionName) 
    {
        if ($navPages = json_decode(get_option($optionName), true)) {
            $this->setPages($navPages);
        }
    }
    
    /**
     * Adds a pages generated by Omeka plugins and other contributors to the 'public_navigation_main' filter
     * Removes old pages from formerly active plugins and other former contributors.
     *
     * @param array $args    Uses the following keys:
     * 'label' = link label
     * 'uri' = link uri
     * 'visible' = whether link is enabled for display or not
     * 'can_delete' = whether or not the link can be deleted or not
     */
    public function addPagesFromFilters() 
    {   
        set_theme_base_uri('public');     
        $pageLinks = array(
            __('Browse Items') => abs_uri('items'), 
            __('Browse Collections') => abs_uri('collections')
        );
        revert_theme_base_uri();
                
        $pageLinks = apply_filters('public_navigation_main', $pageLinks);        
        
        $pageUids = array();
        foreach($pageLinks as $label => $uri) {
            if ($uri = $this->_normalizeUri($uri)) {
                $page = Zend_Navigation_Page::factory(array(
                    'label'   => $label,
                    'uri' => $uri,
                    'visible' => false,
                    'can_delete' => false,
                ));
                $this->_addUniquePage($page);
                $pageUids[] = $this->_createUid($page);
            }
        }
                
        // remove old pages that cannot be deleted and which are not provided by plugins and other filterers
        $badPages = array();
        foreach($this as $page) {
            if (!$page->can_delete && !in_array($page->uid, $pageUids)) {
                $badPages[] = $page;
            }
        }
        foreach($badPages as $badPage) {
            $this->removePage($badPage);
        }
    }
    
    
    /**
     * Normalizes a uri.  
     * If the $uri is a path, then convert it to a valid uri.
     *
     *
     * @param String $uri
     * @return String|null
     */
    private function _normalizeUri($uri) 
    {
        if ($uri !== null) {
            // if uri is a path, then prepend it with WEB_ROOT
            if (strlen($uri) && $uri[0] == '/') {
                if (strpos($uri, ADMIN_BASE_URL) === 0) {
                    $uri = WEB_ROOT . '/admin/' . str_replace(ADMIN_BASE_URL, '', $uri);
                } elseif (strpos($uri, PUBLIC_BASE_URL) === 0) {
                    $uri = WEB_ROOT . str_replace(PUBLIC_BASE_URL, '', $uri);
                } else {
                    $uri = WEB_ROOT . $uri;
                }
            }
            if (Zend_Uri::check($uri)) {
                return $uri;
            }
        }
        return null;
    }
    
    /**
     * Adds a page based on link data
     *
     * @param array $args    Uses the following keys:
     * 'label' = link label
     * 'uri' = link uri
     * 'visible' = whether link is enabled for display or not
     * 'can_delete' = whether or not the link can be deleted or not
     */
    public function addPageFromLinkData($args) 
    {
        // create the page based on the link data contained in $args
        $page = Zend_Navigation_Page::factory($args);
        $this->_addUniquePage($page);
    }
    
    private function _addUniquePage(Zend_Navigation_Page $page)
    {
        // only add the page to the navigation if it does not already exist in the navigation 
         // according to its unique id
         $pageUid = $this->_createUid($page);
         if (!$this->findBy('uid', $pageUid)) {
            $page->uid = $pageUid;
            
            // specify whether the page is the current page (i.e. the "active" page)
            $page->setActive(is_current_uri($page->getHref()));
            
            $this->addPage($page);
            return true;
         }
         return false;
    }
    
    /**
     * Creates a unique id for page, which can be used to determine whether it can be added to the navigaton
     *
     * @param Zend_Navigation_Page $page
     */
    private function _createUid(Zend_Navigation_Page $page) 
    {
        return $page->uri . '|' . $page->label;
    }
}